const tableConfig = {
    location: {
      columns: [
        { id: "name", label: "Store Name" },
        { id: "province", label: "Province" },
        { id: "region", label: "WM Region" },
        { id: "status", label: "Store Status" },
        { id: "market", label: "Market" },
        { id: "city", label: "City" },
        { id: "banner", label: "Banner" },
        { id: "originalGoFY", label: "Original GO FY" },
        { id: "scGoFY", label: "SC GO FY" },
        { id: "scType", label: "SC TYPE" },
        { id: "ageOfBox", label: "Age of Box" },
        { id: "lastTouchProjectYear", label: "Last Touch Project Year" },
        { id: "lastTouchType", label: "Last Touch Type" },
        { id: "lastTouchStatus", label: "Last Touch Status" },
        { id: "template", label: "Template" },
        { id: "totalStoreSqft", label: "Total Store SQFT" },
        { id: "acquisitionHistory", label: "Acquisition History" },
        { id: "storeFormatBN", label: "Store Format BN" },
        { id: "storeFormatBCN", label: "Store Format BCN" },
        { id: "storeFormatDiv1", label: "Store Format Div 1" },
        { id: "storeFormatSC", label: "Store Format SC" },
        { id: "originalGoDate", label: "Original GO Date" },
        { id: "scGoDate", label: "SC GO Date" },
        { id: "lastTouchGoDate", label: "Last Touch GO Date" },
      ],
      getData: (store) => ({
        name: store.name,
        province: store.province,
        region: store.region,
        status: store.status,
        market: store.location.market || "-",
        city: store.location.city,
        banner: store.location.banner || "-",
        originalGoFY: store.location.originalGoFY || "-",
        scGoFY: store.location.scGoFY || "-",
        scType: store.location.scType || "-",
        ageOfBox: store.location.ageOfBox || "-",
        lastTouchProjectYear: store.location.lastTouchProjectYear || "-",
        lastTouchType: store.location.lastTouchType || "-",
        lastTouchStatus: store.location.lastTouchStatus || "-",
        template: store.location.template || "-",
        totalStoreSqft: store.location.totalStoreSqft || "-",
        acquisitionHistory: store.location.acquisitionHistory || "-",
        storeFormatBN: store.location.storeFormatBN ? "Yes" : "No",
        storeFormatBCN: store.location.storeFormatBCN ? "Yes" : "No",
        storeFormatDiv1: store.location.storeFormatDiv1 ? "Yes" : "No",
        storeFormatSC: store.location.storeFormatSC ? "Yes" : "No",
        originalGoDate: store.location.originalGoDate || "-",
        scGoDate: store.location.scGoDate || "-",
        lastTouchGoDate: store.location.lastTouchGoDate || "-",
      }),
    },
    building: {
      columns: [
        { id: "name", label: "Store Name" },
        { id: "size", label: "Size" },
        { id: "yearBuilt", label: "Year Build" },
        { id: "lastRenovated", label: "Last Renovated" },
        { id: "ownedVsLeased", label: "Owned VS Leased" },
        { id: "mallStore", label: "Mall Store" },
        { id: "mallEntrances", label: "Mall Entrances" },
        { id: "securityEntranceGates", label: "Security Entrance Gates" },
        { id: "shoppingCentreType", label: "Shopping Centre Type" },
        { id: "assetProtectionSecurityRoom", label: "Asset Protection Security Room" },
        { id: "floors", label: "Number of Floors" },
        { id: "hasBasement", label: "Basement" },
        { id: "receivingOnDifferentFloor", label: "Receiving on Different Floor" },
        { id: "hasMezzanine", label: "Mezzanine" },
        { id: "freightElevators", label: "Freight Elevators" },
        { id: "customerElevatorLocation", label: "Customer Elevator Location" },
        { id: "verticalTransportation", label: "Vertical Transportation" },
        { id: "hasShoppingCartMovator", label: "Shopping Cart Movator" },
        { id: "cartCorral", label: "Cart Corral" },
      ],
      getData: (store) => ({
        name: store.name,
        size: store.building.size || "-",
        floors: store.building.floors || "-",
        yearBuilt: store.building.yearBuilt || "-",
        lastRenovated: store.building.lastRenovated || "-",
        ownedVsLeased: store.building.ownedVsLeased || "-",
        mallStore: store.building.mallStore ? "Yes" : "No",
        mallEntrances: store.building.mallEntrances || "0",
        securityEntranceGates: store.building.securityEntranceGates || "0",
        shoppingCentreType: store.building.shoppingCentreType || "-",
        assetProtectionSecurityRoom: store.building.assetProtectionSecurityRoom || "-",
        hasBasement: store.building.hasBasement ? "Yes" : "No",
        receivingOnDifferentFloor: store.building.receivingOnDifferentFloor ? "Yes" : "No",
        hasMezzanine: store.building.hasMezzanine ? "Yes" : "No",
        freightElevators: store.building.freightElevators || "0",
        customerElevatorLocation: store.building.customerElevatorLocation || "-",
        verticalTransportation: store.building.verticalTransportation || "-",
        hasShoppingCartMovator: store.building.hasShoppingCartMovator ? "Yes" : "No",
        cartCorral: store.building.cartCorral || "-",
      }),
    },
    site: {
      columns: [
        { id: "name", label: "Store Name" },
        { id: "parkingSpaces", label: "Parking Spaces" },
        { id: "accessibility", label: "Accessibility" },
        { id: "accessibleSpaces", label: "Accessible Spaces" },
        { id: "expectingMotherSpaces", label: "Expecting Mother Spaces" },
        { id: "greenParkingSpaces", label: "Green Parking Spaces" },
        { id: "chargingStations", label: "Charging Stations" },
        { id: "cartCorralExterior", label: "Cart Corral Exterior" },
        { id: "parkingLocation", label: "Parking Location" },
        { id: "hoursOfOperation", label: "Hours of Operation" },
      ],
      getData: (store) => ({
        name: store.name,
        parkingSpaces: store.site.parkingSpaces || "-",
        accessibility: store.site?.accessibility?.join(", ") || "-",
        accessibleSpaces: store.site.accessibleSpaces || "-",
        expectingMotherSpaces: store.site.expectingMotherSpaces || "-",
        greenParkingSpaces: store.site.greenParkingSpaces || "-",
        chargingStations: store.site.chargingStations || "0",
        cartCorralExterior: store.site.cartCorralExterior|| "-",
        parkingLocation: store.site.parkingLocation || "-",
        hoursOfOperation: store.site?.hoursOfOperation || "-",
      }),
    },
    salesFloor: {
      columns: [
        { id: "name", label: "Store Name" },
        { id: "size", label: "Size" },
        { id: "departments", label: "Departments" },
        { id: "checkoutCounters", label: "Checkout Counters" },
        { id: "foodLocation", label: "Food Location" },
        { id: "flooring", label: "Flooring" },
        { id: "woodgrainType", label: "Woodgrain Type" },
        { id: "hasGardenCenter", label: "Has Garden Center" },
        { id: "hasHoseBib", label: "Has Hose Bib" },
      ],
      getData: (store) => ({
        name: store.name,
        size: store.salesFloor.size || "0",
        departments: store.salesFloor.departments?.join(", ") || "-",
        checkoutCounters: store.salesFloor.checkoutCounters || "0",
        foodLocation: store.salesFloor.foodLocation || "-",
        flooring: store.salesFloor.flooring || "-",
        woodgrainType: store.salesFloor.woodgrainType || "-",
        hasGardenCenter: store.salesFloor.hasGardenCenter ? "Yes" : "No",
        hasHoseBib: store.salesFloor.hasHoseBib ? "Yes" : "No",
      }),
    },
    food: {
      columns: [
        { id: "name", label: "Store Name" },
        { id: "hasRestaurant", label: "Sushi" },
        { id: "hasBakery", label: "Vendor" },
        { id: "bakeryLocation", label: "Service Deli" },
        { id: "hasDelicatessen", label: "Sushi" },
        { id: "hasSushi", label: "Vendor" },
        { id: "sushiVendor", label: "Service Deli" },
        { id: "hasServiceDeli", label: "Deli HMR Screens" },
        { id: "hasDeliHMRScreens", label: "Bakery Location" },
        {id: "specialtyFoods", label: "Specialty Foods"},
      ],
      getData: (store) => ({
        name: store.name,
        hasRestaurant: store.food.hasRestaurant ? "Yes" : "No",
        hasBakery: store.food.hasBakery ? "Yes" : "No",
        bakeryLocation: store.food.bakeryLocation || "-",
        hasDelicatessen: store.food.hasDelicatessen ? "Yes" : "No",
        hasSushi: store.food.hasSushi ? "Yes" : "No",
        sushiVendor: store.food.sushiVendor || "-",
        hasServiceDeli: store.food.hasServiceDeli ? "Yes" : "No",
        hasDeliHMRScreens: store.food.hasDeliHMRScreens ? "Yes" : "No",
        specialtyFoods: store.food.specialtyFoods?.join(", ") || "-",
      }),
    },
    pharmacy: {
      columns: [
        { id: "name", label: "Store Name" },
        { id: "isPresent", label: "Present" },
        { id: "hasClinic", label: "Clinic" },
        { id: "location", label: "Location" },
        { id: "tier", label: "1 Tier or 2 Tier" },
        { id: "hasSeating", label: "Seating" },
        { id: "consultationRooms", label: "Consultation Rooms" },
        {id: "services", label: "Services"},
      ],
      getData: (store) => ({
        name: store.name,
        isPresent: store.pharmacy.isPresent ? "Yes" : "No",
        hasClinic: store.pharmacy.hasClinic ? "Yes" : "No",
        location: store.pharmacy.location || "-",
        tier: store.pharmacy.tier || "-",
        hasSeating: store.pharmacy.hasSeating ? "Yes" : "No",
        consultationRooms: store.pharmacy.consultationRooms || "0",
        services: store.pharmacy.services?.join(", ") || "-",
      }),
    },
    marketing: {
      columns: [
        { id: "name", label: "Store Name" },
        {id: "promotions", label: "Promotions"},
        {id: "specialEvents", label: "Special Events"},
        {id: "demographics", label: "Demographics"},
        { id: "hasMinale", label: "Minale" },
        { id: "hasEnchilada", label: "Enchilada" },
        { id: "hasSwipeUp", label: "Swipe Up" },
        { id: "hasPreMinale", label: "Pre Minale" },
        { id: "hasLitFittingRoom", label: "Lit Fitting Room" },
      ],
      getData: (store) => ({
        name: store.name,
        promotions: store.marketing.promotions?.join(", ") || "-",
        specialEvents: store.marketing.specialEvents?.join(", ") || "-",
        demographics: store.marketing.demographics || "-",
        hasMinale: store.marketing.hasMinale ? "Yes" : "No",
        hasEnchilada: store.marketing.hasEnchilada ? "Yes" : "No",
        hasSwipeUp: store.marketing.hasSwipeUp ? "Yes" : "No",
        hasPreMinale: store.marketing.hasPreMinale ? "Yes" : "No",
        hasLitFittingRoom: store.marketing.hasLitFittingRoom ? "Yes" : "No",
      }),
    },
    backroom: {
      columns: [
        { id: "name", label: "Store Name" },
        {id: "size", label: "Size"},
        { id: "hasloadingDocks", label: "Loading Docks" },
        { id: "receivingAreas", label: "Receiving Areas" },
        { id: "ceilingHeight", label: "Backroom Ceiling - Height" },
        { id: "hasMultiHeightCeiling", label: "Backroom Ceiling - Multi-Height" },
        { id: "highSteelPalletSpots", label: "High-Steel Pallet Spots" },
        { id: "cagesLockups", label: "Cages/Lock-ups" },
        { id: "cblTerminals", label: "CBL Terminals" },
        {id: "storageCapacity", label: "Storage Capacity"},
        {id: "securityFeatures", label: "Security Features"},
      ],
      getData: (store) => ({
        name: store.name,
        size: store.backroom.size || "-",
        hasloadingDocks: store.backroom.hasloadingDocks || "0",
        receivingAreas: store.backroom.receivingAreas || "0",
        ceilingHeight: store.backroom.ceilingHeight || "-",
        hasMultiHeightCeiling: store.backroom.hasMultiHeightCeiling ? "Yes" : "No",
        highSteelPalletSpots: store.backroom.highSteelPalletSpots || "0",
        cagesLockups: store.backroom.cagesLockups || "0",
        cblTerminals: store.backroom.cblTerminals || "0",
        storageCapacity: store.backroom.storageCapacity || "-",
        securityFeatures: store.backroom.securityFeatures?.join
          ? store.backroom.securityFeatures.join(", ")
          : "-",
      }),
    },
    omni: {
      columns: [
        { id: "name", label: "Store Name" },
        { id: "parkingSpaces", label: "Parking Spaces" },
        { id: "orangeBranding", label: "Orange Branding" },
        { id: "directAccess", label: "Direct Access" },
        { id: "vanLoading", label: "Van Loading" },
        { id: "hasMobileCheckIn", label: "Mobile Check-In" },
        { id: "mobileCheckIn", label: "Mobile Check In" },
      ],
      getData: (store) => ({
        name: store.name,
        parkingSpaces: store.omni?.parkingSpaces || "-",
        orangeBranding: store.omni?.orangeBranding || "-",
        directAccess: store.omni?.directAccess || "-",
        vanLoading: store.omni?.vanLoading || "-",
        mobileCheckIn: store.omni?.hasMobileCheckIn
          ? store.omni.mobileCheckInType
          : "No",
      }),
    },
  };

  export { tableConfig };